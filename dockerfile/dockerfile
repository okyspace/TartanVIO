### Instructions for Docker
## build image from this dockerfile. E.g. IMAGE_NAME = geovision, IMAGE_TAG = tartanvo2
# docker build -t <IMAGE_NAME>:<IMAGE_TAG> .
# e.g. docker build -t geovision:tartanvo2 .

## run a container, vol should include trg codes, pretrained model etc
# xhost +local:docker && docker run --rm -it -v "/tmp/.X11-unix:/tmp/.X11-unix:rw" -v "/path/to/your/vol:/dev/vol" -e "DISPLAY=${DISPLAY}" --ipc="host" geovision:tartanvo2 
# e.g. xhost +local:docker && docker run --rm -it -v "/tmp/.X11-unix:/tmp/.X11-unix:rw" -v "/mnt/hdd/workspace_geovision/vol:/home/dev/vol" -e "DISPLAY=${DISPLAY}" --ipc="host" geovision:tartanvo2 

## Github
# https://github.com/Amigoshan/geometry_vision


FROM ubuntu:18.04
SHELL ["/bin/bash", "-c"]
USER root


# ==============================
# Configurable params
# ==============================
RUN env


# ==============================
# Configurable params
# ==============================
ARG GITHUB_USER
ARG GITHUB_PWD
RUN env


# ==============================
# Replace with local SG mirrors
# ==============================
RUN sed --in-place --regexp-extended "s/(\/\/)(archive\.ubuntu)/\1sg.\2/" /etc/apt/sources.list
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ Asia/Singapore
RUN apt-get update
RUN apt-get install -y --no-install-recommends sudo curl tzdata
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && sudo dpkg-reconfigure -f noninteractive tzdata


# ==============================
# UI Support
# ==============================
# Enable Vulkan support
RUN sudo apt-get install -y --no-install-recommends libvulkan1 && \
	VULKAN_API_VERSION=`dpkg -s libvulkan1 | grep -oP 'Version: [0-9|\.]+' | grep -oP '[0-9|\.]+'` && \
	mkdir -p /etc/vulkan/icd.d/ && \
	echo \
	"{\
		\"file_format_version\" : \"1.0.0\",\
		\"ICD\": {\
			\"library_path\": \"libGLX_nvidia.so.0\",\
			\"api_version\" : \"${VULKAN_API_VERSION}\"\
		}\
	}" > /etc/vulkan/icd.d/nvidia_icd.json

# Enable X11 support (including the libraries required by CEF) and xvfb so we can create a dummy display if needed
RUN sudo apt-get install -y --no-install-recommends \
	libasound2 \
	libatk1.0-0 \
	libcairo2 \
	libfontconfig1 \
	libfreetype6 \
	libglu1 \
	libnss3 \
	libnspr4 \
	libpango-1.0-0 \
	libpangocairo-1.0-0 \
	libsm6 \
	libxcomposite1 \
	libxcursor1 \
	libxi6 \
	libxrandr2 \
	libxrender1 \
	libxss1 \
	libxv1 \
	x11-xkb-utils \
	xauth \
	xfonts-base \
	xkb-data \
	xvfb


# ============================== 
# User Setup
# ==============================
# add a user with the same USERID as the user outside the container
# Requires a docker build argument `USERID`
ARG USERID=1000
ENV USERNAME dev
ENV USER=dev
RUN useradd -U $USERNAME --uid $USERID -ms /bin/bash \
 && echo "$USERNAME:$USERNAME" | chpasswd \
 && adduser $USERNAME sudo \
 && echo "$USERNAME ALL=NOPASSWD: ALL" >> /etc/sudoers.d/$USERNAME
RUN sudo chown --recursive $USERNAME:$USERNAME /home/$USERNAME
# Commands below run as the dev user
USER $USERNAME
# When running a container start in the dev's home folder
WORKDIR /home/$USERNAME


# ===============================
# Install General Tools
# ===============================
RUN sudo apt-get update --no-install-recommends \
&& sudo apt-get install -y \
	software-properties-common \
	git  \
	wget \
	zip \
	unzip \
	gedit \
	vim \
	python3-pip \
	python3-dev 

# update pip3 version
RUN sudo -H pip3 install --upgrade pip


# ===============================
# Install Dependencies
# ===============================
# For tartanvio, use python3
# check your cuda version and install the appropriate cupy version. https://cupy.dev/
RUN pip3 install numpy matplotlib scipy torch==1.4.0 torchvision opencv-python cupy-cuda113 visdom
# https://github.com/huyaoyu/WorkFlow
RUN git clone -b amigo https://github.com/huyaoyu/WorkFlow.git
WORKDIR WorkFlow
RUN sudo python3 setup.py install


# ============================== 
# HW Accelerate
# ============================== 
# run xhost +local:docker on your host machine if any issues opening UI
# test with cmd: roscore & rviz
# enable NVIDIA Container Toolkit (https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/user-guide.html#dockerfiles)
ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES all
# ENV SDL_VIDEODRIVER=offscreen
ENV SDL_HINT_CUDA_DEVICE=0
ENV QT_X11_NO_MITSHM=1


# ==========================
# Cleanup
# ==========================
RUN sudo apt-get clean autoremove


# =================================== 
# Set working directory for container
# =================================== 
# /home/dev
WORKDIR /home/$USERNAME
